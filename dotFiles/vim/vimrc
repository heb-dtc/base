" VIM configuration flo
" call pathogen#infect()
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'ctrlpvim/ctrlp.vim'
Plug 'dikiaap/minimalist' 
Plug 'tpope/vim-fugitive'
Plug 'bling/vim-airline'
Plug 'altercation/vim-colors-solarized'
Plug 'airblade/vim-gitgutter'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'derekwyatt/vim-fswitch'
Plug 'leafgarland/typescript-vim'
Plug 'prettier/vim-prettier'
Plug 'pangloss/vim-javascript'
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
" Plug '~/.vim/bundle/YouCompleteMe'
Plug 'tpope/vim-sensible'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'blueyed/vim-diminactive'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

call plug#end()

" Disable compatibility with Vi
set nocompatible

" Display 
set title 
set number
set ruler
set wrap 

set scrolloff=3

" indent properly
set tabstop=2
set shiftwidth=2
set expandtab

set autoindent " Copy indent from last line when starting new line

set autoread " Set to auto read when a file is changed from the outside

" Search config
set ignorecase
set smartcase
set incsearch
set hlsearch  

" Beep
set visualbell
set noerrorbells

set cursorline
set colorcolumn=80

set backspace=indent,eol,start

set nocscopeverbose 

" new split appears below or right (feels more natural)
set splitbelow
set splitright

set nofoldenable

" always show status bar
set laststatus=2

set guifont=Source\ Code\ Pro\ For\ Powerline

syntax enable

" let g:solarized_termcolors=16
" set background=dark " dark|light "
colorscheme minimalist 

hi CocFloating ctermbg=8
highlight ColorColumn ctermbg=0 guibg=#081C23
highlight CursorColumn ctermbg=0 guibg=#FF0000 gui=NONE

filetype plugin indent on
set encoding=utf-8
set t_Co=256

let mapleader="," 
nmap <silent> <Leader>of :FSHere<CR> 
nmap <silent> <Leader>or :FSSplitRight<CR> 

" NERDTree.
" ctrl-n to toggle NERDTree
map <C-n> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
"let g:NERDTreeDirArrowExpandable = '>'
"let g:NERDTreeDirArrowCollapsible = '<'

" CtrlP
" Ignore some folders and files for CtrlP indexing
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](node_modules)',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }

"let g:ctrlp_map = ’<leader>c’
" Default parameters for ack
"let g:ackprg="ack -H --nocolor --nogroup --column" 
" Put a marker and search
"nmap <leader>j mA:Ack<space>
" Put a marker and search current word under cursor
"nmap <leader>j amA:Ack "<C-r>=expand("<cword>")<cr>"
"nmap <leader>j amA:Ack "<C-r>=expand("<cWORD>")<cr>"

" gitgutter settings
hi clear signColumn

" Airline settings
" show for tabs
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#hunks#non_zero_only = 1
" use patched font
let g:airline_powerline_fonts = 1
" enable jsx syntax highlighting
let g:jsx_ext_required = 0
let g:airline_theme='minimalist'

cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

au BufRead,BufNewFile *.kt  set filetype=kotlin
au BufRead,BufNewFile *.jet set filetype=kotlin
au Syntax kotlin source ~/.vim/syntax/kotlin.vim

" YouCompleteMe settings
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_auto_trigger = 1

" coc settings
" use TAB to trigger completion
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" use <c-space> to trigger completion
inoremap <silent><expr> <c-@> coc#refresh()

" Make <CR> auto-select the first completion item
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
